@page "/"
@using System.Timers;  

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
    div.row {
        margin-top:40px;
    }
</style>

<div class="container">
    <div class="row">
        @for (int i = 0; i < shuffledAnimals.Count; i++)
        {
            var animal = @shuffledAnimals[i];
            var splace = $"BTN{i}";
            <div class="col-3">
                <button class="btn btn-outline-dark" @onclick="@(() => ButtonClick(animal, splace))">
                    <h1>@animal</h1>
                </button>
            </div>
        }
    </div>
    <div class="row">
        <h2>Matches found @matchesFound</h2>
    </div>
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>
</div>



@code {
    List<string> animalEmoji = new List<string>()
    {
        "🐶", "🐶",
        "🐴", "🐴",
        "😺", "😺",
        "🐮", "🐮",
        "🦊", "🦊",
        "🦁", "🦁",
        "🐯", "🐯",
        "🐹", "🐹"
    };

    List<string> shuffledAnimals = new List<string>();
    int matchesFound;

    string timeDisplay = "";
    int tenthsOfSecondElapsed = 0;

    Timer timer;


    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Elapsed;
        SetupGame();
    }
    void SetupGame()
    {
        matchesFound = 0;
        tenthsOfSecondElapsed = 0;
        Random random = new Random();
        shuffledAnimals = animalEmoji.OrderBy(s => random.Next()).ToList();
    }
    void Timer_Elapsed(object sender, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondElapsed++;
            timeDisplay = (tenthsOfSecondElapsed / 10f).ToString("0.0s");
            StateHasChanged();
        });
    }

    string lastAnimalClicked = string.Empty;
    string lastIndexClicked = string.Empty;

    private void ButtonClick(string animal, string splace)
    {
        if (string.IsNullOrEmpty(lastAnimalClicked))
        {
            lastAnimalClicked = animal;
            lastIndexClicked = splace;
            timer.Start();
        }
        else
        {
            if (lastAnimalClicked == animal && lastIndexClicked != splace)
            {
                // Found a match: Hide emojis
                shuffledAnimals = shuffledAnimals.Select(a => a.Replace(animal, string.Empty)).ToList();

                if (++matchesFound == animalEmoji.Count/2)
                {
                    timer.Stop();
                    timeDisplay += " - play again?";
                    SetupGame();
                }
            }
            else
            {
                // does not match: reset
            }
            lastAnimalClicked = string.Empty;
            lastIndexClicked = string.Empty;
        }
    }
}